import { __awaiter } from "tslib";
import { GoogleMapsAPIWrapper, MarkerManager } from '@agm/core';
import { Injectable, NgZone } from '@angular/core';
import MarkerClusterer from '@google/markerclustererplus';
import { Observable } from 'rxjs';
export class ClusterManager extends MarkerManager {
    constructor(_mapsWrapper, _zone) {
        super(_mapsWrapper, _zone);
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._clustererInstance = new Promise((resolver) => {
            this._resolver = resolver;
        });
    }
    init(options) {
        this._mapsWrapper.getNativeMap().then(map => {
            const clusterer = new MarkerClusterer(map, [], options);
            this._resolver(clusterer);
        });
    }
    getClustererInstance() {
        return this._clustererInstance;
    }
    addMarker(markerDirective) {
        const clusterPromise = this.getClustererInstance();
        const markerPromise = this._mapsWrapper
            .createMarker({
            position: {
                lat: markerDirective.latitude,
                lng: markerDirective.longitude,
            },
            label: markerDirective.label,
            draggable: markerDirective.draggable,
            icon: markerDirective.iconUrl,
            opacity: markerDirective.opacity,
            visible: markerDirective.visible,
            zIndex: markerDirective.zIndex,
            title: markerDirective.title,
            clickable: markerDirective.clickable,
        }, false);
        Promise
            .all([clusterPromise, markerPromise])
            .then(([cluster, marker]) => cluster.addMarker(marker));
        this._markers.set(markerDirective, markerPromise);
    }
    deleteMarker(marker) {
        const markerPromise = this._markers.get(marker);
        if (markerPromise == null) {
            // marker already deleted
            return Promise.resolve();
        }
        return markerPromise.then((m) => {
            this._zone.run(() => {
                m.setMap(null);
                this.getClustererInstance().then(cluster => {
                    cluster.removeMarker(m);
                    this._markers.delete(marker);
                });
            });
        });
    }
    clearMarkers() {
        return this.getClustererInstance().then(cluster => {
            cluster.clearMarkers();
        });
    }
    setGridSize(c) {
        this.getClustererInstance().then(cluster => {
            cluster.setGridSize(c.gridSize);
        });
    }
    setMaxZoom(c) {
        this.getClustererInstance().then(cluster => {
            cluster.setMaxZoom(c.maxZoom);
        });
    }
    setStyles(c) {
        this.getClustererInstance().then(cluster => {
            cluster.setStyles(c.styles);
        });
    }
    setZoomOnClick(c) {
        this.getClustererInstance().then(cluster => {
            if (c.zoomOnClick !== undefined) {
                cluster.setZoomOnClick(c.zoomOnClick);
            }
        });
    }
    setAverageCenter(c) {
        this.getClustererInstance().then(cluster => {
            if (c.averageCenter !== undefined) {
                cluster.setAverageCenter(c.averageCenter);
            }
        });
    }
    setImagePath(c) {
        this.getClustererInstance().then(cluster => {
            if (c.imagePath !== undefined) {
                cluster.setImagePath(c.imagePath);
            }
        });
    }
    setMinimumClusterSize(c) {
        this.getClustererInstance().then(cluster => {
            if (c.minimumClusterSize !== undefined) {
                cluster.setMinimumClusterSize(c.minimumClusterSize);
            }
        });
    }
    setImageExtension(c) {
        this.getClustererInstance().then(cluster => {
            if (c.imageExtension !== undefined) {
                cluster.setImageExtension(c.imageExtension);
            }
        });
    }
    createClusterEventObservable(eventName) {
        return new Observable((subscriber) => {
            this._zone.runOutsideAngular(() => {
                this._clustererInstance.then((m) => {
                    m.addListener(eventName, (e) => this._zone.run(() => subscriber.next(e)));
                });
            });
        });
    }
    setCalculator(c) {
        this.getClustererInstance().then(cluster => {
            if (typeof c.calculator === 'function') {
                cluster.setCalculator(c.calculator);
            }
        });
    }
    setClusterClass(c) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof c.clusterClass !== 'undefined') {
                const instance = yield this.getClustererInstance();
                instance.setClusterClass(c.clusterClass);
            }
        });
    }
    setEnableRetinaIcons(c) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof c.enableRetinaIcons !== 'undefined') {
                const instance = yield this.getClustererInstance();
                instance.setEnableRetinaIcons(c.enableRetinaIcons);
            }
        });
    }
    setIgnoreHidden(c) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof c.ignoreHidden !== 'undefined') {
                const instance = yield this.getClustererInstance();
                instance.setIgnoreHidden(c.ignoreHidden);
            }
        });
    }
    setImageSizes(c) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof c.imageSizes !== 'undefined') {
                const instance = yield this.getClustererInstance();
                instance.setImageSizes(c.imageSizes);
            }
        });
    }
    setTitle(c) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof c.title !== 'undefined') {
                const instance = yield this.getClustererInstance();
                instance.setTitle(c.title);
            }
        });
    }
}
ClusterManager.decorators = [
    { type: Injectable }
];
ClusterManager.ctorParameters = () => [
    { type: GoogleMapsAPIWrapper },
    { type: NgZone }
];
//# sourceMappingURL=data:application/json;base64,