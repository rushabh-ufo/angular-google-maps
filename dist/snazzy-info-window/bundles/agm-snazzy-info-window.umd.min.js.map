{"version":3,"names":["AgmSnazzyInfoWindow","_marker","_wrapper","_manager","_loader","this","isOpen","isOpenChange","EventEmitter","placement","maxWidth","maxHeight","openOnMarkerClick","closeOnMapClick","closeWhenOthersOpen","showCloseButton","panOnOpen","beforeOpen","afterClose","_snazzyInfoWindowInitialized","prototype","ngOnChanges","changes","_nativeSnazzyInfoWindow","_openInfoWindow","_closeInfoWindow","_updatePosition","ngAfterViewInit","_this","m","getNativeMarker","load","then","require","module","Promise","all","getNativeMap","elems","options","map","content","backgroundColor","padding","border","borderRadius","fontColor","pointer","shadow","wrapperClass","callbacks","_createViewContent","emit","afterOpen","openStatus","marker","position","lat","latitude","lng","longitude","open","close","_viewContainerRef","length","evr","createEmbeddedView","_templateRef","setContent","_outerWrapper","nativeElement","setTimeout","detectChanges","setPosition","ngOnDestroy","destroy","Component","args","selector","template","AgmMarker","decorators","type","Optional","Host","SkipSelf","GoogleMapsAPIWrapper","MarkerManager","MapsAPILoader","Input","Output","ViewChild","read","ElementRef","static","ViewContainerRef","ContentChild","TemplateRef","NgModule","declarations","exports"],"sources":["../../../packages/snazzy-info-window/src/lib/directives/snazzy-info-window.ts","../../../packages/snazzy-info-window/src/lib/snazzy-info-window.module.ts"],"sourcesContent":["import { AgmMarker, GoogleMapsAPIWrapper, MapsAPILoader, MarkerManager } from '@agm/core';\r\nimport { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Host, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';\r\n\r\ndeclare var require: any;\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'agm-snazzy-info-window',\r\n  template: '<div #outerWrapper><div #viewContainer></div></div><ng-content></ng-content>',\r\n})\r\nexport class AgmSnazzyInfoWindow implements AfterViewInit, OnDestroy, OnChanges {\r\n  /**\r\n   * The latitude and longitude where the info window is anchored.\r\n   * The offset will default to 0px when using this option. Only required/used if you are not using a agm-marker.\r\n   */\r\n  @Input() latitude: number;\r\n\r\n  /**\r\n   * The longitude where the info window is anchored.\r\n   * The offset will default to 0px when using this option. Only required/used if you are not using a agm-marker.\r\n   */\r\n  @Input() longitude: number;\r\n\r\n  /**\r\n   * Changes the open status of the snazzy info window.\r\n   */\r\n  @Input() isOpen = false;\r\n\r\n  /**\r\n   * Emits when the open status changes.\r\n   */\r\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   * Choose where you want the info window to be displayed, relative to the marker.\r\n   */\r\n  @Input() placement: 'top' | 'bottom' | 'left' | 'right' = 'top';\r\n\r\n  /**\r\n   * The max width in pixels of the info window.\r\n   */\r\n  @Input() maxWidth: number | string = 200;\r\n\r\n  /**\r\n   * The max height in pixels of the info window.\r\n   */\r\n  @Input() maxHeight: number | string = 200;\r\n\r\n  /**\r\n   * The color to use for the background of the info window.\r\n   */\r\n  @Input() backgroundColor: string;\r\n\r\n  /**\r\n   * A custom padding size around the content of the info window.\r\n   */\r\n  @Input() padding: string;\r\n\r\n  /**\r\n   * A custom border around the info window. Set to false to completely remove the border.\r\n   * The units used for border should be the same as pointer.\r\n   */\r\n  @Input() border: {width: string; color: string} | boolean;\r\n\r\n  /**\r\n   * A custom CSS border radius property to specify the rounded corners of the info window.\r\n   */\r\n  @Input() borderRadius: string;\r\n\r\n  /**\r\n   * The font color to use for the content inside the body of the info window.\r\n   */\r\n  @Input() fontColor: string;\r\n\r\n  /**\r\n   * The font size to use for the content inside the body of the info window.\r\n   */\r\n  @Input() fontSize: string;\r\n\r\n  /**\r\n   * The height of the pointer from the info window to the marker.\r\n   * Set to false to completely remove the pointer.\r\n   * The units used for pointer should be the same as border.\r\n   */\r\n  @Input() pointer: string | boolean;\r\n\r\n  /**\r\n   * The CSS properties for the shadow of the info window.\r\n   * Set to false to completely remove the shadow.\r\n   */\r\n  @Input() shadow: boolean | {h?: string, v?: string, blur: string, spread: string, opacity: number, color: string};\r\n\r\n  /**\r\n   * Determines if the info window will open when the marker is clicked.\r\n   * An internal listener is added to the Google Maps click event which calls the open() method.\r\n   */\r\n  @Input() openOnMarkerClick = true;\r\n\r\n  /**\r\n   * Determines if the info window will close when the map is clicked. An internal listener is added to\r\n   * the Google Maps click event which calls the close() method.\r\n   * This will not activate on the Google Maps drag event when the user is panning the map.\r\n   */\r\n  @Input() closeOnMapClick = true;\r\n\r\n  /**\r\n   * An optional CSS class to assign to the wrapper container of the info window.\r\n   * Can be used for applying custom CSS to the info window.\r\n   */\r\n  @Input() wrapperClass: string;\r\n\r\n  /**\r\n   * Determines if the info window will close when any other Snazzy Info Window is opened.\r\n   */\r\n  @Input() closeWhenOthersOpen = false;\r\n\r\n  /**\r\n   * Determines if the info window will show a close button.\r\n   */\r\n  @Input() showCloseButton = true;\r\n\r\n  /**\r\n   * Determines if the info window will be panned into view when opened.\r\n   */\r\n  @Input() panOnOpen = true;\r\n\r\n  /**\r\n   * Emits before the info window opens.\r\n   */\r\n  @Output() beforeOpen: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Emits before the info window closes.\r\n   */\r\n  @Output() afterClose: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  @ViewChild('outerWrapper', {read: ElementRef, static: false}) _outerWrapper: ElementRef;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  @ViewChild('viewContainer', {read: ViewContainerRef, static: false}) _viewContainerRef: ViewContainerRef;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  @ContentChild(TemplateRef, {static: false}) _templateRef: TemplateRef<any>;\r\n\r\n  protected _nativeSnazzyInfoWindow: any;\r\n  protected _snazzyInfoWindowInitialized: Promise<any> | null = null;\r\n\r\n  constructor(\r\n    @Optional() @Host() @SkipSelf() private _marker: AgmMarker,\r\n    private _wrapper: GoogleMapsAPIWrapper,\r\n    private _manager: MarkerManager,\r\n    private _loader: MapsAPILoader,\r\n  ) {}\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (this._nativeSnazzyInfoWindow == null) {\r\n      return;\r\n    }\r\n    if ('isOpen' in changes && this.isOpen) {\r\n      this._openInfoWindow();\r\n    } else if ('isOpen' in changes && !this.isOpen) {\r\n      this._closeInfoWindow();\r\n    }\r\n    if (('latitude' in changes || 'longitude' in changes) && this._marker == null) {\r\n      this._updatePosition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngAfterViewInit() {\r\n    const m = this._manager != null ? this._manager.getNativeMarker(this._marker) : null;\r\n    this._snazzyInfoWindowInitialized = this._loader.load()\r\n      .then(() => require('snazzy-info-window'))\r\n      .then((module: any) => Promise.all([module, m, this._wrapper.getNativeMap()]))\r\n      .then((elems) => {\r\n        const options: any = {\r\n          map: elems[2],\r\n          content: '',\r\n          placement: this.placement,\r\n          maxWidth: this.maxWidth,\r\n          maxHeight: this.maxHeight,\r\n          backgroundColor: this.backgroundColor,\r\n          padding: this.padding,\r\n          border: this.border,\r\n          borderRadius: this.borderRadius,\r\n          fontColor: this.fontColor,\r\n          pointer: this.pointer,\r\n          shadow: this.shadow,\r\n          closeOnMapClick: this.closeOnMapClick,\r\n          openOnMarkerClick: this.openOnMarkerClick,\r\n          closeWhenOthersOpen: this.closeWhenOthersOpen,\r\n          showCloseButton: this.showCloseButton,\r\n          panOnOpen: this.panOnOpen,\r\n          wrapperClass: this.wrapperClass,\r\n          callbacks: {\r\n            beforeOpen: () => {\r\n              this._createViewContent();\r\n              this.beforeOpen.emit();\r\n            },\r\n            afterOpen: () => {\r\n              this.isOpenChange.emit(this.openStatus());\r\n            },\r\n            afterClose: () => {\r\n              this.afterClose.emit();\r\n              this.isOpenChange.emit(this.openStatus());\r\n            },\r\n          },\r\n        };\r\n        if (elems[1] != null) {\r\n          options.marker = elems[1];\r\n        } else {\r\n          options.position = {\r\n            lat: this.latitude,\r\n            lng: this.longitude,\r\n          };\r\n        }\r\n        this._nativeSnazzyInfoWindow = new elems[0](options);\r\n      });\r\n    this._snazzyInfoWindowInitialized.then(() => {\r\n        if (this.isOpen) {\r\n          this._openInfoWindow();\r\n        }\r\n    });\r\n  }\r\n\r\n  protected _openInfoWindow() {\r\n    this._snazzyInfoWindowInitialized.then(() => {\r\n      this._createViewContent();\r\n      this._nativeSnazzyInfoWindow.open();\r\n    });\r\n  }\r\n\r\n  protected _closeInfoWindow() {\r\n    this._snazzyInfoWindowInitialized.then(() => {\r\n      this._nativeSnazzyInfoWindow.close();\r\n    });\r\n  }\r\n\r\n  protected _createViewContent() {\r\n    if (this._viewContainerRef.length === 1) {\r\n      return;\r\n    }\r\n    const evr = this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n    this._nativeSnazzyInfoWindow.setContent(this._outerWrapper.nativeElement);\r\n    // we have to run this in a separate cycle.\r\n    setTimeout(() => {\r\n      evr.detectChanges();\r\n    });\r\n  }\r\n\r\n  protected _updatePosition() {\r\n    this._nativeSnazzyInfoWindow.setPosition({\r\n      lat: this.latitude,\r\n      lng: this.longitude,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true when the Snazzy Info Window is initialized and open.\r\n   */\r\n  openStatus(): boolean {\r\n    return this._nativeSnazzyInfoWindow && this._nativeSnazzyInfoWindow.isOpen();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    if (this._nativeSnazzyInfoWindow) {\r\n      this._nativeSnazzyInfoWindow.destroy();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AgmSnazzyInfoWindow } from './directives/snazzy-info-window';\r\n\r\n@NgModule({\r\n  declarations: [AgmSnazzyInfoWindow],\r\n  exports: [AgmSnazzyInfoWindow],\r\n})\r\nexport class AgmSnazzyInfoWindowModule {}\r\n"],"mappings":"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"}