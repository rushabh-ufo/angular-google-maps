{"version":3,"file":"agm-snazzy-info-window.umd.js","sources":["../../../packages/snazzy-info-window/src/lib/directives/snazzy-info-window.ts","../../../packages/snazzy-info-window/src/lib/snazzy-info-window.module.ts","../../../packages/snazzy-info-window/src/public-api.ts","../../../packages/snazzy-info-window/src/agm-snazzy-info-window.ts"],"sourcesContent":["import { AgmMarker, GoogleMapsAPIWrapper, MapsAPILoader, MarkerManager } from '@agm/core';\r\nimport { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Host, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';\r\n\r\ndeclare var require: any;\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'agm-snazzy-info-window',\r\n  template: '<div #outerWrapper><div #viewContainer></div></div><ng-content></ng-content>',\r\n})\r\nexport class AgmSnazzyInfoWindow implements AfterViewInit, OnDestroy, OnChanges {\r\n  /**\r\n   * The latitude and longitude where the info window is anchored.\r\n   * The offset will default to 0px when using this option. Only required/used if you are not using a agm-marker.\r\n   */\r\n  @Input() latitude: number;\r\n\r\n  /**\r\n   * The longitude where the info window is anchored.\r\n   * The offset will default to 0px when using this option. Only required/used if you are not using a agm-marker.\r\n   */\r\n  @Input() longitude: number;\r\n\r\n  /**\r\n   * Changes the open status of the snazzy info window.\r\n   */\r\n  @Input() isOpen = false;\r\n\r\n  /**\r\n   * Emits when the open status changes.\r\n   */\r\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   * Choose where you want the info window to be displayed, relative to the marker.\r\n   */\r\n  @Input() placement: 'top' | 'bottom' | 'left' | 'right' = 'top';\r\n\r\n  /**\r\n   * The max width in pixels of the info window.\r\n   */\r\n  @Input() maxWidth: number | string = 200;\r\n\r\n  /**\r\n   * The max height in pixels of the info window.\r\n   */\r\n  @Input() maxHeight: number | string = 200;\r\n\r\n  /**\r\n   * The color to use for the background of the info window.\r\n   */\r\n  @Input() backgroundColor: string;\r\n\r\n  /**\r\n   * A custom padding size around the content of the info window.\r\n   */\r\n  @Input() padding: string;\r\n\r\n  /**\r\n   * A custom border around the info window. Set to false to completely remove the border.\r\n   * The units used for border should be the same as pointer.\r\n   */\r\n  @Input() border: {width: string; color: string} | boolean;\r\n\r\n  /**\r\n   * A custom CSS border radius property to specify the rounded corners of the info window.\r\n   */\r\n  @Input() borderRadius: string;\r\n\r\n  /**\r\n   * The font color to use for the content inside the body of the info window.\r\n   */\r\n  @Input() fontColor: string;\r\n\r\n  /**\r\n   * The font size to use for the content inside the body of the info window.\r\n   */\r\n  @Input() fontSize: string;\r\n\r\n  /**\r\n   * The height of the pointer from the info window to the marker.\r\n   * Set to false to completely remove the pointer.\r\n   * The units used for pointer should be the same as border.\r\n   */\r\n  @Input() pointer: string | boolean;\r\n\r\n  /**\r\n   * The CSS properties for the shadow of the info window.\r\n   * Set to false to completely remove the shadow.\r\n   */\r\n  @Input() shadow: boolean | {h?: string, v?: string, blur: string, spread: string, opacity: number, color: string};\r\n\r\n  /**\r\n   * Determines if the info window will open when the marker is clicked.\r\n   * An internal listener is added to the Google Maps click event which calls the open() method.\r\n   */\r\n  @Input() openOnMarkerClick = true;\r\n\r\n  /**\r\n   * Determines if the info window will close when the map is clicked. An internal listener is added to\r\n   * the Google Maps click event which calls the close() method.\r\n   * This will not activate on the Google Maps drag event when the user is panning the map.\r\n   */\r\n  @Input() closeOnMapClick = true;\r\n\r\n  /**\r\n   * An optional CSS class to assign to the wrapper container of the info window.\r\n   * Can be used for applying custom CSS to the info window.\r\n   */\r\n  @Input() wrapperClass: string;\r\n\r\n  /**\r\n   * Determines if the info window will close when any other Snazzy Info Window is opened.\r\n   */\r\n  @Input() closeWhenOthersOpen = false;\r\n\r\n  /**\r\n   * Determines if the info window will show a close button.\r\n   */\r\n  @Input() showCloseButton = true;\r\n\r\n  /**\r\n   * Determines if the info window will be panned into view when opened.\r\n   */\r\n  @Input() panOnOpen = true;\r\n\r\n  /**\r\n   * Emits before the info window opens.\r\n   */\r\n  @Output() beforeOpen: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Emits before the info window closes.\r\n   */\r\n  @Output() afterClose: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  @ViewChild('outerWrapper', {read: ElementRef, static: false}) _outerWrapper: ElementRef;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  @ViewChild('viewContainer', {read: ViewContainerRef, static: false}) _viewContainerRef: ViewContainerRef;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  @ContentChild(TemplateRef, {static: false}) _templateRef: TemplateRef<any>;\r\n\r\n  protected _nativeSnazzyInfoWindow: any;\r\n  protected _snazzyInfoWindowInitialized: Promise<any> | null = null;\r\n\r\n  constructor(\r\n    @Optional() @Host() @SkipSelf() private _marker: AgmMarker,\r\n    private _wrapper: GoogleMapsAPIWrapper,\r\n    private _manager: MarkerManager,\r\n    private _loader: MapsAPILoader,\r\n  ) {}\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (this._nativeSnazzyInfoWindow == null) {\r\n      return;\r\n    }\r\n    if ('isOpen' in changes && this.isOpen) {\r\n      this._openInfoWindow();\r\n    } else if ('isOpen' in changes && !this.isOpen) {\r\n      this._closeInfoWindow();\r\n    }\r\n    if (('latitude' in changes || 'longitude' in changes) && this._marker == null) {\r\n      this._updatePosition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngAfterViewInit() {\r\n    const m = this._manager != null ? this._manager.getNativeMarker(this._marker) : null;\r\n    this._snazzyInfoWindowInitialized = this._loader.load()\r\n      .then(() => require('snazzy-info-window'))\r\n      .then((module: any) => Promise.all([module, m, this._wrapper.getNativeMap()]))\r\n      .then((elems) => {\r\n        const options: any = {\r\n          map: elems[2],\r\n          content: '',\r\n          placement: this.placement,\r\n          maxWidth: this.maxWidth,\r\n          maxHeight: this.maxHeight,\r\n          backgroundColor: this.backgroundColor,\r\n          padding: this.padding,\r\n          border: this.border,\r\n          borderRadius: this.borderRadius,\r\n          fontColor: this.fontColor,\r\n          pointer: this.pointer,\r\n          shadow: this.shadow,\r\n          closeOnMapClick: this.closeOnMapClick,\r\n          openOnMarkerClick: this.openOnMarkerClick,\r\n          closeWhenOthersOpen: this.closeWhenOthersOpen,\r\n          showCloseButton: this.showCloseButton,\r\n          panOnOpen: this.panOnOpen,\r\n          wrapperClass: this.wrapperClass,\r\n          callbacks: {\r\n            beforeOpen: () => {\r\n              this._createViewContent();\r\n              this.beforeOpen.emit();\r\n            },\r\n            afterOpen: () => {\r\n              this.isOpenChange.emit(this.openStatus());\r\n            },\r\n            afterClose: () => {\r\n              this.afterClose.emit();\r\n              this.isOpenChange.emit(this.openStatus());\r\n            },\r\n          },\r\n        };\r\n        if (elems[1] != null) {\r\n          options.marker = elems[1];\r\n        } else {\r\n          options.position = {\r\n            lat: this.latitude,\r\n            lng: this.longitude,\r\n          };\r\n        }\r\n        this._nativeSnazzyInfoWindow = new elems[0](options);\r\n      });\r\n    this._snazzyInfoWindowInitialized.then(() => {\r\n        if (this.isOpen) {\r\n          this._openInfoWindow();\r\n        }\r\n    });\r\n  }\r\n\r\n  protected _openInfoWindow() {\r\n    this._snazzyInfoWindowInitialized.then(() => {\r\n      this._createViewContent();\r\n      this._nativeSnazzyInfoWindow.open();\r\n    });\r\n  }\r\n\r\n  protected _closeInfoWindow() {\r\n    this._snazzyInfoWindowInitialized.then(() => {\r\n      this._nativeSnazzyInfoWindow.close();\r\n    });\r\n  }\r\n\r\n  protected _createViewContent() {\r\n    if (this._viewContainerRef.length === 1) {\r\n      return;\r\n    }\r\n    const evr = this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n    this._nativeSnazzyInfoWindow.setContent(this._outerWrapper.nativeElement);\r\n    // we have to run this in a separate cycle.\r\n    setTimeout(() => {\r\n      evr.detectChanges();\r\n    });\r\n  }\r\n\r\n  protected _updatePosition() {\r\n    this._nativeSnazzyInfoWindow.setPosition({\r\n      lat: this.latitude,\r\n      lng: this.longitude,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true when the Snazzy Info Window is initialized and open.\r\n   */\r\n  openStatus(): boolean {\r\n    return this._nativeSnazzyInfoWindow && this._nativeSnazzyInfoWindow.isOpen();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnDestroy() {\r\n    if (this._nativeSnazzyInfoWindow) {\r\n      this._nativeSnazzyInfoWindow.destroy();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AgmSnazzyInfoWindow } from './directives/snazzy-info-window';\r\n\r\n@NgModule({\r\n  declarations: [AgmSnazzyInfoWindow],\r\n  exports: [AgmSnazzyInfoWindow],\r\n})\r\nexport class AgmSnazzyInfoWindowModule {}\r\n","/*\r\n * Public API Surface of snazzy-info-window\r\n */\r\n\r\nexport * from './lib/directives/snazzy-info-window';\r\nexport * from './lib/snazzy-info-window.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["EventEmitter","Component","AgmMarker","Optional","Host","SkipSelf","GoogleMapsAPIWrapper","MarkerManager","MapsAPILoader","Input","Output","ViewChild","ElementRef","ViewContainerRef","ContentChild","TemplateRef","NgModule"],"mappings":"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"}